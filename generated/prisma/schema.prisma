// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int    @id @default(autoincrement())
  username     String
  email        String
  phone_number String
  password     String

  created_at DateTime @default(now())
  update_at  DateTime @updatedAt

  address  Address[]
  checkout Checkout[]
}

model Category {
  id            Int           @id @default(autoincrement())
  category_name Category_name

  created_at DateTime @default(now())
  update_at  DateTime @updatedAt
}

model Product {
  id          Int    @id @default(autoincrement())
  name_prduct String
  description String
  price       Int

  created_at DateTime @default(now())
  update_at  DateTime @updatedAt

  cart     Cart[]
  checkout Checkout[]
}

model Cart {
  id          Int @id @default(autoincrement())
  product_id  Int
  total_price Int

  created_at DateTime @default(now())
  update_at  DateTime @updatedAt

  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model Address {
  id       Int    @id @default(autoincrement())
  user_id  Int
  city     String
  province String
  postcode Int

  created_at DateTime @default(now())
  update_at  DateTime @updatedAt

  checkout Checkout[]
  user     User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Checkout {
  id          Int @id @default(autoincrement())
  user_id     Int
  address_id  Int
  product_id  Int
  total_price Int

  created_at DateTime @default(now())
  update_at  DateTime @updatedAt

  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  address Address @relation(fields: [address_id], references: [id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model Payment {
  id             Int            @id @default(autoincrement())
  order_id       Int
  payment_method Payment_method
  payment_status Payment_status
  payment_date   DateTime
  amount         Int

  created_at DateTime @default(now())
  update_at  DateTime @updatedAt

  order Order @relation(fields: [order_id], references: [id], onDelete: Cascade)
}

model Order {
  id          Int @id @default(autoincrement())
  user_id     Int
  product_id  Int
  category_id Int

  created_at DateTime @default(now())
  update_at  DateTime @updatedAt

  payment Payment[]
}

enum Payment_method {
  COD
  Virtual_Account
}

enum Payment_status {
  Pending
  Success
  Failed
}

enum Category_name {
  Shop
  Plant_care
  Disscusion
  Account
}
